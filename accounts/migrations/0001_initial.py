# Generated by Django 4.1.7 on 2023-05-02 09:40

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.BigAutoField(db_column='id', primary_key=True, serialize=False, unique=True)),
                ('email', models.EmailField(db_column='email', max_length=254, unique=True)),
                ('password', models.CharField(db_column='password', max_length=20)),
                ('first_name', models.CharField(db_column='FName', max_length=20)),
                ('last_name', models.CharField(db_column='LName', max_length=20)),
                ('username', models.CharField(db_column='UserName', max_length=20, unique=True)),
                ('PhoneNo', models.CharField(db_column='PhoneNo', default=0, max_length=45)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ('id',),
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Access_level',
            fields=[
                ('Access_Level_ID', models.AutoField(db_column='Access_Level_id', primary_key=True, serialize=False)),
                ('Description', models.CharField(db_column='Description', max_length=50)),
            ],
            options={
                'db_table': 'ACCESS_LEVEL',
                'ordering': ('Access_Level_ID',),
            },
        ),
        migrations.CreateModel(
            name='Fault',
            fields=[
                ('Fault_id', models.AutoField(db_column='Fault_id', primary_key=True, serialize=False, unique=True)),
                ('Description', models.CharField(db_column='Description', max_length=45)),
                ('Date_of_Occurence', models.DateTimeField(db_column='Date_of_Occurence', default=0)),
                ('Fault_Status', models.CharField(db_column='Fault_Status', max_length=45)),
            ],
            options={
                'db_table': 'FAULT',
                'ordering': ('Fault_id',),
            },
        ),
        migrations.CreateModel(
            name='Garage',
            fields=[
                ('GarageID', models.AutoField(primary_key=True, serialize=False)),
                ('GarageName', models.CharField(max_length=50)),
                ('Address', models.CharField(max_length=50)),
                ('WorkOrderNo', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'GARAGE',
                'ordering': ('GarageID',),
            },
        ),
        migrations.CreateModel(
            name='Maintenance_type',
            fields=[
                ('Maintenance_Type_ID', models.AutoField(db_column='Maintenance_Type_ID', primary_key=True, serialize=False, unique=True)),
                ('Description', models.CharField(db_column='Description', max_length=30)),
                ('Fault_id', models.ForeignKey(blank=True, db_column='Fault_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='accounts.fault')),
            ],
            options={
                'db_table': 'MAINTENANCE_TYPE',
                'ordering': ('Maintenance_Type_ID',),
            },
        ),
        migrations.CreateModel(
            name='Vehicle_type',
            fields=[
                ('Vehicle_Type_ID', models.AutoField(db_column='Vehicle_Type_ID', primary_key=True, serialize=False, unique=True)),
                ('Description', models.CharField(db_column='Description', max_length=30)),
            ],
            options={
                'db_table': 'VEHICLE_TYPE',
                'ordering': ('Vehicle_Type_ID',),
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('customuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'PERSON',
                'ordering': ('id',),
                'abstract': False,
            },
            bases=('accounts.customuser',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Work_order',
            fields=[
                ('WORK_ORDER_id', models.AutoField(db_column='WORK_ORDER_id', primary_key=True, serialize=False, unique=True)),
                ('Date_of_Creation', models.DateField(db_column='Date_of_Creation')),
                ('Date_of_Approval', models.DateField(db_column='Date_of_Approval')),
                ('Estimated_Cost', models.CharField(db_column='Estimated_Cost', max_length=45)),
                ('Date_of_Completion', models.DateField(db_column='Date_of_Completed')),
                ('Garage_Name', models.OneToOneField(blank=True, db_column='GarageName', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='accounts.garage')),
                ('MAINTENANCE_TYPE_id', models.ForeignKey(blank=True, db_column='MAINTENANCE_TYPE_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='accounts.maintenance_type')),
                ('PersonID', models.ForeignKey(blank=True, db_column='PersonID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='accounts.person')),
            ],
            options={
                'db_table': 'WORK_ORDER',
                'ordering': ('Date_of_Creation',),
            },
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('Plate_Number', models.CharField(db_column='Plate_Number', max_length=20, primary_key=True, serialize=False)),
                ('Make', models.CharField(db_column='Make', max_length=30)),
                ('Model', models.CharField(db_column='Model', max_length=30)),
                ('Year', models.DateField(db_column='Year')),
                ('Current_location', models.CharField(db_column='Current_location', max_length=50)),
                ('Colour', models.CharField(db_column='Colour', max_length=20)),
                ('Vehicle_Description', models.TextField(db_column='Vehicle_Description', max_length=500)),
                ('Put_in_service_Date', models.DateTimeField(db_column='Put_in_service_Date')),
                ('Taken_out_of_service_Date', models.DateTimeField(db_column='Taken_out_of_service_Date')),
                ('Intial_Mileage', models.CharField(db_column='Intial_Mileage', default=0, max_length=20)),
                ('Current_Mileage', models.CharField(db_column='Current_Mileage', max_length=20)),
                ('Engine_Oil_Change_Mileage', models.CharField(db_column='Engine_Oil_Change_Mileage', max_length=20)),
                ('Interim_service_Mileage', models.CharField(db_column='Interim_service_Mileage', max_length=20)),
                ('Full_service_Mileage', models.CharField(db_column='Full_service_Mileage', max_length=20)),
                ('Down_Time', models.CharField(db_column='Down_Time', max_length=20)),
                ('VEHICLE_TYPE_id', models.ForeignKey(blank=True, db_column='VEHICLE_TYPE_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='accounts.vehicle_type')),
                ('PersonID', models.ForeignKey(blank=True, db_column='PersonID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='PERSON_PERSON_id', to='accounts.person')),
            ],
            options={
                'db_table': 'VEHICLE',
                'ordering': ['Put_in_service_Date', 'Taken_out_of_service_Date'],
            },
        ),
        migrations.CreateModel(
            name='Tyre',
            fields=[
                ('Tyre_code', models.IntegerField(db_column='Tyre_code', primary_key=True, serialize=False, unique=True)),
                ('Tyre_model', models.CharField(db_column='Tyre_model', max_length=45)),
                ('Tyre_brand', models.CharField(db_column='Trye_brand', max_length=45)),
                ('Tyre_size', models.CharField(db_column='Tyre_size', max_length=20)),
                ('Tread_depth', models.IntegerField(db_column='Tread_depth')),
                ('Tyre_description', models.TextField(db_column='Tyre_description', max_length=500)),
                ('Load_capacity', models.CharField(db_column='Load_capacity', max_length=20)),
                ('Material', models.CharField(db_column='Material', max_length=20)),
                ('Rim_width', models.CharField(db_column='Rim_width', max_length=20)),
                ('Section_width', models.CharField(db_column='Section_width', max_length=20)),
                ('Radius', models.CharField(db_column='Radius', max_length=20)),
                ('Speed_rating', models.CharField(db_column='Speed_rating', max_length=20)),
                ('Wear_and_tear', models.CharField(db_column='Wear_and_tear', max_length=30)),
                ('Tyre_service_mileage', models.CharField(db_column='Tyre_service_mileage', max_length=20)),
                ('Plate_Number', models.OneToOneField(db_column='Plate_Number', max_length=20, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.vehicle')),
            ],
            options={
                'db_table': 'TYRE',
                'ordering': ('Tyre_code',),
            },
        ),
        migrations.CreateModel(
            name='Service_schedule',
            fields=[
                ('Schedule_id', models.AutoField(db_column='Schedule_id', primary_key=True, serialize=False, unique=True)),
                ('Year', models.DateField(db_column='Year')),
                ('Service_Mileage', models.IntegerField(db_column='Service_Mileage')),
                ('Service_Items', models.CharField(db_column='Service_Items', max_length=45)),
                ('Level_code', models.CharField(db_column='Level_code', max_length=5)),
                ('Plate_Number', models.ForeignKey(blank=True, db_column='Plate_Number', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='accounts.vehicle')),
            ],
            options={
                'db_table': 'SERVICE_SCHEDULE',
                'ordering': ('Schedule_id',),
            },
        ),
        migrations.AddField(
            model_name='maintenance_type',
            name='Schedule_id',
            field=models.ForeignKey(blank=True, db_column='Schedule_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='accounts.service_schedule'),
        ),
        migrations.AddField(
            model_name='fault',
            name='Plate_Number',
            field=models.ForeignKey(blank=True, db_column='Plate_Number', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='accounts.vehicle'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='Access_Level_ID',
            field=models.OneToOneField(blank=True, db_column='Access_Level_ID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='accounts.access_level'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, db_column='Responsibility', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='Garage_manager',
            fields=[
                ('person_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='accounts.person')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'GARAGE_MANAGER',
                'ordering': ('id',),
                'abstract': False,
            },
            bases=('accounts.person',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('person_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='accounts.person')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'Staff',
                'db_table': 'STAFF',
                'ordering': ('id',),
                'abstract': False,
            },
            bases=('accounts.person',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Maintenance_record',
            fields=[
                ('Maintenance_record_id', models.AutoField(db_column='Maintenance_record_id', primary_key=True, serialize=False, unique=True)),
                ('Start_date', models.DateTimeField(db_column='Start_date')),
                ('Completion_date', models.DateTimeField(db_column='Completion_date')),
                ('Description_of_Maintenance_actions', models.CharField(db_column='Description_of_Maintenance_actions', max_length=200)),
                ('Maintenance_cost', models.CharField(db_column='Maintenance_cost', max_length=20)),
                ('Maintenance_Status', models.CharField(choices=[('Ongoing', 'Ongoing'), ('Completed', 'Completed')], db_column='Maintenance_Status', default='Ongoing', max_length=10)),
                ('Maintenance_type_ID', models.ForeignKey(db_column='Maintenance_Type_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='accounts.maintenance_type')),
                ('Plate_Number', models.ForeignKey(db_column='Plate_Number', on_delete=django.db.models.deletion.DO_NOTHING, to='accounts.vehicle')),
                ('WORK_ORDER_id', models.ForeignKey(db_column='WORK_ORDER_id', on_delete=django.db.models.deletion.DO_NOTHING, to='accounts.work_order')),
                ('PersonID', models.ForeignKey(blank=True, db_column='PersonID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='accounts.person')),
            ],
            options={
                'db_table': 'MAINTENANCE_RECORD',
                'ordering': ('Maintenance_record_id',),
            },
        ),
        migrations.AddField(
            model_name='garage',
            name='PersonID',
            field=models.ForeignKey(blank=True, db_column='PersonID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='accounts.person'),
        ),
        migrations.AddField(
            model_name='fault',
            name='PersonID',
            field=models.ForeignKey(blank=True, db_column='PersonID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='accounts.person'),
        ),
    ]
